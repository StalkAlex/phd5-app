stages:
  - build
  - test
  - report
  - release
  - deploy
  - cleanup

variables:
  ISOLATION: "buildpipeline${CI_PIPELINE_ID}"
  APP_VERSION: "$(git describe --always --dirty)"
  STACK_PHP_IMAGE: "${PHP_IMAGE_NAME}:${APP_VERSION}"
  REGISTRY_PHP_IMAGE: "${PHP_IMAGE_NAME}:${CI_BUILD_REF_NAME}"
  COMPOSE_PROJECT_NAME: "${ISOLATION}"

before_script:
  - pwd
  - docker version
  - docker-compose version
  - echo ${ISOLATION}
  - echo ${APP_VERSION}

  # initialize environments
  - make init
  # run all commands from test directory
  - cd tests

after_script:
  # run all commands from test directory
  - cd tests
  - cp .env-dist .env
  - make clean

codeception:
  stage: test
  script:
    - make all
    - make run-tests
    - make clean
  except:
    - coverage
  artifacts:
    name: ${CI_PROJECT_PATH}-p${CI_PIPELINE_ID}-codeception
    when: always
    expire_in: 4 weeks
    paths:
      - tests/codeception/_output

coverage:
  stage: test
  script:
    - export COMPOSE_PROJECT_NAME=${ISOLATION}${CI_BUILD_NAME}
    - make PHP_ENABLE_XDEBUG=1 up setup
    - make run-coverage
    - make clean
  only:
    - coverage
  artifacts:
    name: ${CI_PROJECT_PATH}-p${CI_PIPELINE_ID}-coverage
    when: always
    expire_in: 4 weeks
    paths:
      - tests/codeception/_output

lint:
  stage: test
  script:
    - export COMPOSE_PROJECT_NAME=${ISOLATION}${CI_BUILD_NAME}
    - cd ..
    - cp .env-dist .env
    - make help
    - make lint
    - make lint-composer
    - make clean
  artifacts:
    name: ${CI_PROJECT_PATH}-p${CI_PIPELINE_ID}-lint
    when: always
    expire_in: 4 weeks
    paths:
      - _artifacts

release:
  stage: release
  script:
    - docker login --username ${REGISTRY_USER} --password ${REGISTRY_PASS} ${REGISTRY_HOST}
    - docker tag ${STACK_PHP_IMAGE} ${REGISTRY_PHP_IMAGE}
    - docker push ${REGISTRY_PHP_IMAGE}
  only:
    - latest
    - experimental
    - tags

